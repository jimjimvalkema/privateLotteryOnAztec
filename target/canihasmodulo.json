{"noir_version":"0.31.0+540bef3597bd3e5775c83ec2ee3c0d4463084b4c","hash":6934288233561556750,"abi":{"parameters":[{"name":"x","type":{"kind":"field"},"visibility":"private"},{"name":"y","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/71YwW7UMBB1skmasmzVvSCBOARuHJDsOJs4ty2HcuArEm0ikECL0Ir+HZ+GiNUxvDpuabt2LUX2TsZv3ozHY28idt3y6XlO43R6oumJ2bxF1G+p58c14RGLO+g+FlvYAoyFGS8gHscanBGIyIA29osMLejZWjYXARdF8rqqhqYchBQdL9tebXi16WsllNioza5UUg6qUk3btw1veSUHMW5aORJW/HgsYWHxBQuTLLHn+Pn0ObkDSzVDPzaV7Hg19hNOPQ6yK1sxKjnBy0r03cB3Vd/UVa3Ghqfk6yxpmf+NnfjD4sg3ZQE3XahApAFwM49JFsrvzP8aObn6KCya67GFwMb1uUYnzO+G0j5rzAvKT4wrNt954bOII9+cPcFpnBOm/p04ghY5ZAuQPaPxG3j/mvrucBi+fT8Uh33R7XbF1ZfD52L/c/gxft1f4dz6iLkXD5z7l/wn6nMAKJinACteZgBur2KMhqnXdpcM7qgkP6GH0fsoB4yprUEWwdTEt09T0mj7Jn6m2b4VME4cfLb++PAz4IO2Mv+2pPbTVJWUcI2dGDgYnVegew7c0gBxwM1rrikx2LfjEjG/hSQG3AjsICej8wJ4vQRusf+4CMyP2GFXjz/S2KUbKJdKzCVzehibGdjOA8RE2zb1xGBjjuimdU6BD+qYuQnovKX+nM1bDnoF81uLUsvWXbXIcDhz+JLDuPDHkS/Zvz1g8LXtd0Htlgr3YErYNg+8zb4H3UsarywMIzPz8RKQg94WdLAOGJ0WdMugcbjOdbyxF2weB+SfWTou/g31rlxfOubieq/gvYmp6wxz6aEvds343zz81rNl8/qMNSFjt59tRucD9bft9wBnfXkf/3FvY/wvYWzq/Yrd/O6lG95vYpDZeqeAj/mFcbZlCchcF+yY3TxH7fcu2dJhZ+2Q2fvRxtMNz+DfzO+/WxO31MEtgfd49kX+uQj01/Wtc+2Izx/sm3lpUBYAAA==","debug_symbols":"ndfdasJAEAXgd9lrkZ2Z/c2rlFKixhKQKBoLRXz3xtZtoY6EPZebnO9iZycT9mI23er8/tYP2/3JNC8Xs9uv27HfD9PqYuz3o9OhHW6r09geR9NkXphu2JiGrL0uzLbfdaZx8fq6MFSZ58q8VOZdZd5X5kNlPlbmU2U+156XesDxD9B/QLXALtVNUwzFxPhoEmAyYPQCzCFCkNrrlGJBmRUkCFK70qVySC4lBUUEJQRlALFaPW/dHXnrFSQICkDJWa0eC90RS1BQQlCeQe7xG1+KRRAhiBEkCHII8ggKCIoAcnrJQyooaogR5BEUEKQWQqQgcfKIvNqwjn5nBCsT1hOCGEGCIIcgqHoJQRlA4ck5SdkTKbM8EIJ4BrEyloMgyCHIIygAHREighKAItX9PqfFR3vs29Wuu10ebu/Ow7rcJabl+Hn4eTNlvwA=","file_map":{"47":{"source":"use std::hash::poseidon;\n\nfn main(x: Field, y: pub Field) {\n    let a = unconstrained_usqrt(x as u64);\n}\n\n\nunconstrained fn unconstrained_usqrt(s: u64)-> u64 {\n    let mut z = 0;\n    if (s > 3) {\n        z = s;\n        let mut x = s / 2 + 1;\n        for index in 0 .. 40 { //0 .. 36 should be enough for u64, 40 to be safe\n            if x > z {\n                break;\n                z = x;\n                x = (s / x + x) / 2; \n            }\n            \n        }\n    } else if (s != 0) {\n        z = 1;\n    }\n    z\n}\n\n// fn shuffle(\n//     x: u64,\n//     domain: u64,\n//     seed: u64,\n//     rounds: u64,\n// ) -> u64 {\n//     let f =  poseidon::bn254::hash_4;\n\n//     assert(domain != 0, \"modulus must be > 0\");\n//     assert(x < domain, \"x too large\");\n//     assert((rounds & 1) == 0, \"rounds must be even\");\n\n\n//     let h = usqrt(nextPerfectSquare(domain));\n//     // do {\n//     //     let L = x % h;\n//     //     let R = x / h;\n//     //     for (let i = 0n; i < rounds; i++) {\n//     //         const nextR = (L + f([R, i, seed, domain])) % h;\n//     //         L = R;\n//     //         R = nextR;\n//     //     }\n//     //     x = h * R + L;\n//     // } while (x >= domain);\n//     x\n// }\n\n#[test]\nfn test_main() {\n    main(1, 2);\n    let a: Field = 10;\n    let b: Field = 4;\n    println((a as u64) % (b as u64));\n    println(poseidon::bn254::hash_1([a]));\n    println(poseidon::bn254::hash_1([a]) as u64 as Field);\n    // Uncomment to make test fail\n    // main(1, 1);\n}\n","path":"/home/jimjim/Desktop/canihasmodulo/src/main.nr"}},"names":["main"]}